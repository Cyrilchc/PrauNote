// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220613140706_Person_message_chat")]
    partial class Person_message_chat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppointmentName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AppointmentStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentStatusId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Models.AppointmentStatus", b =>
                {
                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppointmentStatusDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppointmentStatusName")
                        .HasColumnType("TEXT");

                    b.HasKey("AppointmentStatusId");

                    b.ToTable("AppointmentStatuses");
                });

            modelBuilder.Entity("Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignmentName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudentPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssignmentId");

                    b.HasIndex("StudentPersonId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.HasKey("AttachmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChatName")
                        .HasColumnType("TEXT");

                    b.HasKey("ChatId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AssignmentGrade")
                        .HasColumnType("REAL");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GradeId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupName")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FromPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ToPersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MessageId");

                    b.HasIndex("FromPersonId");

                    b.HasIndex("ToPersonId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GivenName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.HasIndex("ChatId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubjectName")
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.HasBaseType("Models.Person");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Models.Teacher", b =>
                {
                    b.HasBaseType("Models.Person");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Models.Appointment", b =>
                {
                    b.HasOne("Models.AppointmentStatus", "AppointmentStatus")
                        .WithMany()
                        .HasForeignKey("AppointmentStatusId");

                    b.Navigation("AppointmentStatus");
                });

            modelBuilder.Entity("Models.Assignment", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentPersonId");

                    b.HasOne("Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Models.Attachment", b =>
                {
                    b.HasOne("Models.Assignment", null)
                        .WithMany("Attachments")
                        .HasForeignKey("AssignmentId");
                });

            modelBuilder.Entity("Models.Grade", b =>
                {
                    b.HasOne("Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Models.Group", b =>
                {
                    b.HasOne("Models.Appointment", null)
                        .WithMany("Groups")
                        .HasForeignKey("AppointmentId");
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.HasOne("Models.Person", "From")
                        .WithMany()
                        .HasForeignKey("FromPersonId");

                    b.HasOne("Models.Person", "To")
                        .WithMany()
                        .HasForeignKey("ToPersonId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Models.Person", b =>
                {
                    b.HasOne("Models.Chat", null)
                        .WithMany("Attendees")
                        .HasForeignKey("ChatId");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.HasOne("Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Models.Appointment", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Models.Assignment", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Models.Chat", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("Models.Group", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
